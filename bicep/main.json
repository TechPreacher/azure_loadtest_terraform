{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.34.44.8038",
      "templateHash": "13780440488299815852"
    }
  },
  "parameters": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group"
      }
    },
    "loadTestName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Load Test resource"
      }
    },
    "identityName": {
      "type": "string",
      "metadata": {
        "description": "The name of the User Assigned Managed Identity"
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Key Vault"
      }
    },
    "postgresServerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the PostgreSQL Flexible Server"
      }
    },
    "postgresAdminUsername": {
      "type": "securestring",
      "metadata": {
        "description": "The admin username for PostgreSQL"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The admin password for PostgreSQL"
      }
    },
    "postgresDatabaseName": {
      "type": "string",
      "defaultValue": "test",
      "metadata": {
        "description": "The name of the PostgreSQL database"
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags for all resources"
      }
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "standard",
      "metadata": {
        "description": "SKU name for the Key Vault"
      }
    },
    "softDeleteRetentionInDays": {
      "type": "int",
      "defaultValue": 7,
      "metadata": {
        "description": "Soft delete retention period in days"
      }
    },
    "loadTestTestName": {
      "type": "string",
      "defaultValue": "PostgreSQL Test Timed Load Testing",
      "metadata": {
        "description": "The test name in Azure Load Testing"
      }
    },
    "mainThreads": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Number of threads for main database operations"
      }
    },
    "mainLoops": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "Number of loops for main database operations"
      }
    },
    "replicaThreads": {
      "type": "int",
      "defaultValue": 40,
      "metadata": {
        "description": "Number of threads for replica database operations"
      }
    },
    "replicaLoops": {
      "type": "int",
      "defaultValue": 400,
      "metadata": {
        "description": "Number of loops for replica database operations"
      }
    },
    "mainWritesPerMinute": {
      "type": "int",
      "defaultValue": 120,
      "metadata": {
        "description": "Main database writes per minute"
      }
    },
    "replicaReadsPerMinute": {
      "type": "int",
      "defaultValue": 480,
      "metadata": {
        "description": "Replica database reads per minute"
      }
    },
    "engineInstances": {
      "type": "int",
      "defaultValue": 40,
      "metadata": {
        "description": "Number of engine instances for the load test"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2022-09-01",
      "name": "[parameters('resourceGroupName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "resourcesDeployment",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "loadTestName": {
            "value": "[parameters('loadTestName')]"
          },
          "identityName": {
            "value": "[parameters('identityName')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "postgresServerName": {
            "value": "[parameters('postgresServerName')]"
          },
          "postgresAdminUsername": {
            "value": "[parameters('postgresAdminUsername')]"
          },
          "postgresAdminPassword": {
            "value": "[parameters('postgresAdminPassword')]"
          },
          "postgresDatabaseName": {
            "value": "[parameters('postgresDatabaseName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "keyVaultSku": {
            "value": "[parameters('keyVaultSku')]"
          },
          "softDeleteRetentionInDays": {
            "value": "[parameters('softDeleteRetentionInDays')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "11772003559426389058"
            }
          },
          "parameters": {
            "loadTestName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Load Test resource"
              }
            },
            "identityName": {
              "type": "string",
              "metadata": {
                "description": "The name of the User Assigned Managed Identity"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Key Vault"
              }
            },
            "postgresServerName": {
              "type": "string",
              "metadata": {
                "description": "The name of the PostgreSQL Flexible Server"
              }
            },
            "postgresAdminUsername": {
              "type": "securestring",
              "metadata": {
                "description": "The admin username for PostgreSQL"
              }
            },
            "postgresAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The admin password for PostgreSQL"
              }
            },
            "postgresDatabaseName": {
              "type": "string",
              "defaultValue": "test",
              "metadata": {
                "description": "The name of the PostgreSQL database"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for all resources"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags for all resources"
              }
            },
            "keyVaultSku": {
              "type": "string",
              "defaultValue": "standard",
              "metadata": {
                "description": "SKU name for the Key Vault"
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "Soft delete retention period in days"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.LoadTestService/loadTests",
              "apiVersion": "2022-12-01",
              "name": "[parameters('loadTestName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {}
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('identityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "tenantId": "[subscription().tenantId]",
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "accessPolicies": [
                  {
                    "tenantId": "[subscription().tenantId]",
                    "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]",
                    "permissions": {
                      "keys": [
                        "all"
                      ],
                      "secrets": [
                        "all"
                      ],
                      "certificates": [
                        "all"
                      ]
                    }
                  }
                ],
                "sku": {
                  "name": "[parameters('keyVaultSku')]",
                  "family": "A"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2022-12-01",
              "name": "[parameters('postgresServerName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_E2ds_v5",
                "tier": "MemoryOptimized"
              },
              "properties": {
                "version": "14",
                "administratorLogin": "[parameters('postgresAdminUsername')]",
                "administratorLoginPassword": "[parameters('postgresAdminPassword')]",
                "storage": {
                  "storageSizeGB": 128,
                  "autoGrow": "Disabled"
                },
                "authConfig": {
                  "activeDirectoryAuth": "Enabled",
                  "passwordAuth": "Enabled",
                  "tenantId": "[subscription().tenantId]"
                },
                "highAvailability": {
                  "mode": "Disabled"
                },
                "backup": {
                  "backupRetentionDays": 7,
                  "geoRedundantBackup": "Disabled"
                }
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', parameters('postgresServerName'), 'AllowAll')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', parameters('postgresServerName'), 'AllowAzureServices')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', parameters('postgresServerName'), parameters('postgresDatabaseName'))]",
              "properties": {
                "charset": "UTF8",
                "collation": "en_US.UTF8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}repl', parameters('postgresServerName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_E2ds_v5",
                "tier": "MemoryOptimized"
              },
              "properties": {
                "createMode": "Replica",
                "sourceServerResourceId": "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]",
                "version": "14",
                "administratorLogin": "[parameters('postgresAdminUsername')]",
                "administratorLoginPassword": "[parameters('postgresAdminPassword')]",
                "storage": {
                  "storageSizeGB": 128,
                  "autoGrow": "Disabled"
                },
                "authConfig": {
                  "activeDirectoryAuth": "Enabled",
                  "passwordAuth": "Enabled",
                  "tenantId": "[subscription().tenantId]"
                },
                "highAvailability": {
                  "mode": "Disabled"
                },
                "backup": {
                  "backupRetentionDays": 7,
                  "geoRedundantBackup": "Disabled"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers/databases', parameters('postgresServerName'), parameters('postgresDatabaseName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'postgres-username')]",
              "properties": {
                "value": "[parameters('postgresAdminUsername')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'postgres-password')]",
              "properties": {
                "value": "[parameters('postgresAdminPassword')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'postgres-server')]",
              "properties": {
                "value": "[parameters('postgresServerName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'postgres-database')]",
              "properties": {
                "value": "[parameters('postgresDatabaseName')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'postgres-fqdn')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'postgres-replica-server')]",
              "properties": {
                "value": "[format('{0}repl', parameters('postgresServerName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}repl', parameters('postgresServerName')))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'postgres-replica-fqdn')]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}repl', parameters('postgresServerName'))), '2022-12-01').fullyQualifiedDomainName]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}repl', parameters('postgresServerName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "deploymentMessage",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.44.0",
                "retentionInterval": "P1D",
                "timeout": "PT5M",
                "scriptContent": "      echo \"=== IMPORTANT: Manual action required ===\"\n      echo \"After deployment, you need to manually add an AD admin to the primary PostgreSQL server.\"\n      echo \"The replica server will inherit the AD admin configuration automatically.\"\n      echo \"\"\n      echo \"Run the following command to add an AD admin:\"\n      echo \"\"\n      echo \"az postgres flexible-server ad-admin create \\\\\"\n      echo \"  --server-name $POSTGRES_SERVER \\\\\"\n      echo \"  --resource-group $RESOURCE_GROUP \\\\\"\n      echo \"  --object-id <your-aad-object-id> \\\\\"\n      echo \"  --principal-type User \\\\\"\n      echo \"  --display-name <your-aad-display-name>\"\n      echo \"\"\n      echo \"=== End of Manual Actions ===\"\n    ",
                "environmentVariables": [
                  {
                    "name": "POSTGRES_SERVER",
                    "value": "[parameters('postgresServerName')]"
                  },
                  {
                    "name": "RESOURCE_GROUP",
                    "value": "[resourceGroup().name]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}repl', parameters('postgresServerName')))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName'))]"
              ]
            }
          ],
          "outputs": {
            "loadTestId": {
              "type": "string",
              "value": "[resourceId('Microsoft.LoadTestService/loadTests', parameters('loadTestName'))]"
            },
            "loadTestName": {
              "type": "string",
              "value": "[parameters('loadTestName')]"
            },
            "managedIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            },
            "managedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]"
            },
            "managedIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').clientId]"
            },
            "keyVaultId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
            },
            "postgresServerName": {
              "type": "string",
              "value": "[parameters('postgresServerName')]"
            },
            "postgresServerFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName]"
            },
            "postgresReplicaServerName": {
              "type": "string",
              "value": "[format('{0}repl', parameters('postgresServerName'))]"
            },
            "postgresReplicaServerFqdn": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('{0}repl', parameters('postgresServerName'))), '2022-12-01').fullyQualifiedDomainName]"
            },
            "manualActionRequired": {
              "type": "string",
              "value": "After deployment, manually add AAD admin to PostgreSQL servers. See deployment script output for instructions."
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "loadTestDeployment",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "loadTestName": {
            "value": "[parameters('loadTestName')]"
          },
          "userAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.managedIdentityId.value]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.keyVaultUri.value]"
          },
          "testName": {
            "value": "[parameters('loadTestTestName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "primaryServerFqdn": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.postgresServerFqdn.value]"
          },
          "replicaServerFqdn": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.postgresReplicaServerFqdn.value]"
          },
          "mainThreads": {
            "value": "[parameters('mainThreads')]"
          },
          "mainLoops": {
            "value": "[parameters('mainLoops')]"
          },
          "replicaThreads": {
            "value": "[parameters('replicaThreads')]"
          },
          "replicaLoops": {
            "value": "[parameters('replicaLoops')]"
          },
          "mainWritesPerMinute": {
            "value": "[parameters('mainWritesPerMinute')]"
          },
          "replicaReadsPerMinute": {
            "value": "[parameters('replicaReadsPerMinute')]"
          },
          "engineInstances": {
            "value": "[parameters('engineInstances')]"
          },
          "databaseName": {
            "value": "[parameters('postgresDatabaseName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "18109856734347549922"
            }
          },
          "parameters": {
            "loadTestName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing Azure Load Test resource"
              }
            },
            "userAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The name of the User Assigned Managed Identity to use for Key Vault access"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The Key Vault name containing the secrets"
              }
            },
            "keyVaultUri": {
              "type": "string",
              "metadata": {
                "description": "The Key Vault URI"
              }
            },
            "testName": {
              "type": "string",
              "defaultValue": "PostgreSQL Test Timed Load Testing",
              "metadata": {
                "description": "The test name in Azure Load Testing"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for all resources"
              }
            },
            "primaryServerFqdn": {
              "type": "string",
              "metadata": {
                "description": "Primary PostgreSQL server FQDN"
              }
            },
            "replicaServerFqdn": {
              "type": "string",
              "metadata": {
                "description": "Replica PostgreSQL server FQDN"
              }
            },
            "mainThreads": {
              "type": "int",
              "defaultValue": 10,
              "metadata": {
                "description": "Number of threads for main database operations"
              }
            },
            "mainLoops": {
              "type": "int",
              "defaultValue": 100,
              "metadata": {
                "description": "Number of loops for main database operations"
              }
            },
            "replicaThreads": {
              "type": "int",
              "defaultValue": 40,
              "metadata": {
                "description": "Number of threads for replica database operations"
              }
            },
            "replicaLoops": {
              "type": "int",
              "defaultValue": 400,
              "metadata": {
                "description": "Number of loops for replica database operations"
              }
            },
            "mainWritesPerMinute": {
              "type": "int",
              "defaultValue": 120,
              "metadata": {
                "description": "Main database writes per minute"
              }
            },
            "replicaReadsPerMinute": {
              "type": "int",
              "defaultValue": 480,
              "metadata": {
                "description": "Replica database reads per minute"
              }
            },
            "engineInstances": {
              "type": "int",
              "defaultValue": 40,
              "metadata": {
                "description": "Number of engine instances for the load test"
              }
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "test",
              "metadata": {
                "description": "Database name in PostgreSQL server"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.LoadTestService/loadTests/tests",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', parameters('loadTestName'), parameters('testName'))]",
              "properties": {
                "description": "Load test for PostgreSQL primary and replica databases",
                "displayName": "[parameters('testName')]",
                "loadTestConfiguration": {
                  "engineInstances": "[parameters('engineInstances')]",
                  "splitAllCSVs": false,
                  "quickStartTest": false
                },
                "environmentVariables": {
                  "main_threads": "[format('{0}', parameters('mainThreads'))]",
                  "main_loops": "[format('{0}', parameters('mainLoops'))]",
                  "main_database": "[format('jdbc:postgresql://{0}:5432/{1}', parameters('primaryServerFqdn'), parameters('databaseName'))]",
                  "replica_threads": "[format('{0}', parameters('replicaThreads'))]",
                  "replica_loops": "[format('{0}', parameters('replicaLoops'))]",
                  "replica_database": "[format('jdbc:postgresql://{0}:5432/{1}', parameters('replicaServerFqdn'), parameters('databaseName'))]",
                  "main_writes_per_minute": "[format('{0}', parameters('mainWritesPerMinute'))]",
                  "replica_reads_per_minute": "[format('{0}', parameters('replicaReadsPerMinute'))]"
                },
                "secrets": {
                  "mainuser": {
                    "type": "AKV_SECRET_URI",
                    "value": "[format('{0}secrets/postgres-username', parameters('keyVaultUri'))]"
                  },
                  "mainpassword": {
                    "type": "AKV_SECRET_URI",
                    "value": "[format('{0}secrets/postgres-password', parameters('keyVaultUri'))]"
                  },
                  "replicauser": {
                    "type": "AKV_SECRET_URI",
                    "value": "[format('{0}secrets/postgres-username', parameters('keyVaultUri'))]"
                  },
                  "replicapassword": {
                    "type": "AKV_SECRET_URI",
                    "value": "[format('{0}secrets/postgres-password', parameters('keyVaultUri'))]"
                  }
                },
                "secretsConfiguration": {
                  "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                  "identityId": "[parameters('userAssignedIdentityId')]"
                },
                "testType": "JMX",
                "passFailCriteria": {
                  "passFailMetrics": {
                    "totalRequests": {
                      "aggregate": "avg",
                      "clientMetric": "request_count",
                      "condition": ">=",
                      "value": 1
                    },
                    "averageResponseTime": {
                      "aggregate": "avg",
                      "clientMetric": "response_time_ms",
                      "condition": "<=",
                      "value": 5000
                    },
                    "requestsPerSec": {
                      "aggregate": "avg",
                      "clientMetric": "requests_per_sec",
                      "condition": ">=",
                      "value": 1
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "fileUploadReminder",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.44.0",
                "retentionInterval": "P1D",
                "timeout": "PT5M",
                "scriptContent": "      echo \"=== IMPORTANT: Manual action required for Load Test ===\"\n      echo \"After deployment, you need to manually upload the test files:\"\n      echo \"\"\n      echo \"1. Navigate to the Azure Portal → Azure Load Testing → $LOAD_TEST_NAME → Tests → $TEST_NAME\"\n      echo \"2. Click 'Edit' on the test\"\n      echo \"3. Upload the following files:\"\n      echo \"   - JMeter script: load_test_artifacts/jmeter_script.jmx\"\n      echo \"   - PostgreSQL JDBC driver: load_test_artifacts/postgresql-42.7.5.jar (in the 'Additional Files' section)\"\n      echo \"\"\n      echo \"Alternatively, you can use REST API to upload the files:\"\n      echo \"az rest --method PUT --uri ${environment().resourceManager}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.LoadTestService/loadTests/$LOAD_TEST_NAME/tests/$TEST_NAME/files/{fileName}?api-version=2022-12-01 --body @{filePath}\"\n      echo \"\"\n      echo \"=== End of Manual Actions ===\"\n    ",
                "environmentVariables": [
                  {
                    "name": "LOAD_TEST_NAME",
                    "value": "[parameters('loadTestName')]"
                  },
                  {
                    "name": "TEST_NAME",
                    "value": "[parameters('testName')]"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "loadTestId": {
              "type": "string",
              "value": "[resourceId('Microsoft.LoadTestService/loadTests/tests', parameters('loadTestName'), parameters('testName'))]"
            },
            "loadTestName": {
              "type": "string",
              "value": "[parameters('loadTestName')]"
            },
            "testId": {
              "type": "string",
              "value": "[resourceId('Microsoft.LoadTestService/loadTests/tests', parameters('loadTestName'), parameters('testName'))]"
            },
            "testName": {
              "type": "string",
              "value": "[parameters('testName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[parameters('resourceGroupName')]"
    },
    "resourceGroupId": {
      "type": "string",
      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('resourceGroupName'))]"
    },
    "loadTestId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.loadTestId.value]"
    },
    "loadTestName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.loadTestName.value]"
    },
    "managedIdentityId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.managedIdentityId.value]"
    },
    "managedIdentityPrincipalId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.managedIdentityPrincipalId.value]"
    },
    "managedIdentityClientId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.managedIdentityClientId.value]"
    },
    "keyVaultId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.keyVaultId.value]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.keyVaultName.value]"
    },
    "keyVaultUri": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.keyVaultUri.value]"
    },
    "postgresServerName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.postgresServerName.value]"
    },
    "postgresServerFqdn": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.postgresServerFqdn.value]"
    },
    "postgresReplicaServerName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.postgresReplicaServerName.value]"
    },
    "postgresReplicaServerFqdn": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'resourcesDeployment'), '2022-09-01').outputs.postgresReplicaServerFqdn.value]"
    },
    "loadTestConfigId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'loadTestDeployment'), '2022-09-01').outputs.testId.value]"
    },
    "loadTestConfigName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', 'loadTestDeployment'), '2022-09-01').outputs.testName.value]"
    }
  }
}